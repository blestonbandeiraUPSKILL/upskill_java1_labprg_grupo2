@startuml

title UC10-A - Seriar Candidaturas de Anúncio (não automaticamente)

participant Colaborador
participant SeriarCandidaturasUI
participant SeriarCandidaturasCtrl
participant RepositorioAnuncio
participant RepositorioCandidatura
participant RepositorioClassificacao
participant RepositorioColaborador
participant RepositorioSeriacao


activate Colaborador
Colaborador -> SeriarCandidaturasUI: Consulta anúncios com regime \nde seriação manual, em periodo \nde seriação, ainda não seriados
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: getAllAnunciosASeriar\n(idRegimentoManual)
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioAnuncio: getAllAnunciosASeriar\n(idRegimentoManual)
activate RepositorioAnuncio
RepositorioAnuncio --> SeriarCandidaturasCtrl: listaAnunciosASeriar\n(idRegimentoManual)
deactivate RepositorioAnuncio
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: listaAnunciosASeriar\n(idRegimentoManual)
deactivate SeriarCandidaturasCtrl
alt (Não existem anúncios a seriar manualmente)
SeriarCandidaturasUI --> Colaborador: Não existem anúncios \ndisponiveis

else Existem anúncios a seriar manualmente 
SeriarCandidaturasUI --> Colaborador: Mostra a lista dos Anúncios a \nseriar manualmente
deactivate SeriarCandidaturasUI


Colaborador -> SeriarCandidaturasUI: Seleciona um anúncio a seriar 
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: getAllCandidaturas(idAnuncio)
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioCandidatura: getAllCandidaturas(idAnuncio)
activate RepositorioCandidatura
RepositorioCandidatura --> SeriarCandidaturasCtrl: listaCandidaturas(idAnuncio)
deactivate RepositorioCandidatura
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: listaCandidaturas(idAnuncio)
deactivate SeriarCandidaturasCtrl
SeriarCandidaturasUI --> Colaborador: Mostra a lista de candidaturas \nao anúncio e solicita a classificação \nde cada candidatura
deactivate SeriarCandidaturasUI
loop
Colaborador -> SeriarCandidaturasUI: Atribui uma classificação a uma \ndada candidatura
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: saveClassificacao\n(idAnuncio, idCandidatura, posicao, )
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioClassificacao: saveClassificacao(idAnuncio, idCandidatura, posicao)
activate RepositorioClassificacao
end loop
RepositorioClassificacao --> SeriarCandidaturasCtrl: listaCandidaturasSeriada(idAnuncio)
deactivate RepositorioClassificacao
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: listaCandidaturasSeriadas\n(idAnuncio)
deactivate SeriarCandidaturasCtrl
SeriarCandidaturasUI --> Colaborador: Mostra a lista seriada \nde candidatura e solicita \ninformar se há colaboradores \nadicionais que participaram do \nprocesso
deactivate SeriarCandidaturasUI

alt (Não existem colaboradores participantes adicionais)
Colaborador -> SeriarCandidaturasUI: Indica que não há colaboradores \nparticipantes adicionais
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio)
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioSeriacao: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio))
activate RepositorioSeriacao
RepositorioSeriacao -> RepositorioSeriacao: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio)
RepositorioSeriacao --> SeriarCandidaturasCtrl: Seriação salva com sucesso
deactivate RepositorioSeriacao
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: Seriação salva com sucesso
deactivate SeriarCandidaturasCtrl
SeriarCandidaturasUI --> Colaborador: Informa o sucesso da operação
deactivate SeriarCandidaturasUI

else Existem colaboradores participantes adicionais
Colaborador -> SeriarCandidaturasUI: Indica que há colaboradores participantes \nadicionais
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: getAllColaboradores(nifOrganizacao)
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioColaborador: getAllColaboradores(nifOrganizacao)
activate RepositorioColaborador
RepositorioColaborador --> SeriarCandidaturasCtrl: listaColaboradores(nifOrganizacao)
deactivate RepositorioColaborador
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: listaColaboradores(nifOrganizacao)
deactivate SeriarCandidaturasCtrl
SeriarCandidaturasUI --> Colaborador: Mostra os colaboradores da organização \ne solicita selecionar os demais envolvidos \nna seriação
deactivate SeriarCandidaturasUI

Colaborador -> SeriarCandidaturasUI: Seleciona os colaboradores adicionais \nparticipantes na Seriação
activate SeriarCandidaturasUI
SeriarCandidaturasUI -> SeriarCandidaturasCtrl: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio), \nlistaColaboradoresParticipantes())
activate SeriarCandidaturasCtrl
SeriarCandidaturasCtrl -> RepositorioSeriacao: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio), \nlistaColaboradoresParticipantes())
activate RepositorioSeriacao
RepositorioSeriacao -> RepositorioSeriacao: saveSeriacao(idAnuncio, \ndataSeriacao, \nlistaCandidaturasSeriada(idAnuncio), \nlistaColaboradoresParticipantes())
RepositorioSeriacao --> SeriarCandidaturasCtrl: Seriação salva com sucesso
deactivate RepositorioSeriacao
SeriarCandidaturasCtrl --> SeriarCandidaturasUI: Seriação salva com sucesso
deactivate SeriarCandidaturasCtrl
SeriarCandidaturasUI --> Colaborador: Informa o sucesso da operação
deactivate SeriarCandidaturasUI
end alt
end alt
deactivate Colaborador
@enduml
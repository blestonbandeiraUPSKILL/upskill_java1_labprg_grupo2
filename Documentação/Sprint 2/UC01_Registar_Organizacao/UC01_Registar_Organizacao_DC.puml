@startuml

title UC01 - Registar Organização - Diagrama de Classes

class RegistarOrganizacaoUI {
}

class RegistarOrganizacaoController {
    --
    +novaOrganizacao(nome, NIF, endLocal, enderacoPostal, endLocalidade, tlf, websiteOrg, emailOrg, nomeG, funcao, tlfG, emailG, pwd)
    +registaOrganizacao()
}

class Organizacao {
    -String nome
    -String NIF
    -Website websiteOrg
    -String telefone
    -Email emailOrg
    --
    +Organizacao(nome, NIF, websiteOrg, telefone, emailOrg, enderecoOrg, gestorColaborador)
    +EnderecoPostal novoEndereco(local, codPostal, localidade)
    +Colaborador novoColaborador(nome, funcao, tlf, email)
}

class Colaborador {
    -String funcao
    -String telefone
    -Organizacao organizacao
    --
    +Colaborador(nome,funcao,tlf,email)
    +String getNome()
    +String getEmail()
}

class EnderecoPostal {
    -String arruamento
    -String numeroPorta
    -String codPostal
    -String localidade
    --
    +EnderecoPostal(arruamento, numeroPorta, localidade, codPostal)
}

class RepositorioOrganizacao {
    --
    +Organizacao registaOrganizacao(nif, nome, website, \ntelefoneOrg, emailOrg, \nendArruamento, endPorta, endLocalidade, endCodPostal, \nnomeGestor, telefoneGestor, funcaoGestor)
    
    +saveOrganizacao(nif, nome, website, \ntelefoneOrg, emailOrg, \nendArruamento, endPorta, endLocalidade, endCodPostal, \nnomeGestor, telefoneGestor, funcaoGestor)
    -addOrganizacao(Organizacao org)
    -registaGestorComoUtilizador(Colaborador colabGestor)

}RepositorioOrganizacao

class AutorizacaoFacade {
    --
    +registaUtilizadorComPapeis(nomeG,emailG,pwd,rolename)
}

interface AlgoritmoGeradorPasswords {
    --
    +geraPassword(nomeG, emailG)
}

class Plataforma {
    -String designacao
    --
    +AutorizacaoFacade getAutorizacaoFacade()
    +AlgoritmoGeradorPasswords getAlgoritmoGeradorPwd()
}

RegistarOrganizacaoUI ..> RegistarOrganizacaoController
RegistarOrganizacaoController ..> RepositorioOrganizacao
RegistarOrganizacaoController ..> Organizacao
Organizacao "1"-->"1..*" Colaborador 
Organizacao "1"-->"1" Colaborador 
Organizacao "1"-->"1" EnderecoPostal 
RepositorioOrganizacao "1"-->"*" Organizacao 
RepositorioOrganizacao ..> AutorizacaoFacade
RepositorioOrganizacao ..> AlgoritmoGeradorPasswords
RepositorioOrganizacao ..> Colaborador
RepositorioOrganizacao ..> EnderecoPostal

newpage

interface AlgoritmoGeradorPasswords {
    --
    +String geraPassword(String nomeG, String emailG)
}

note left
Esta interface será alvo de múltiplas implementações,
uma por cada algoritmo externo que tenha que ser suportado.
end note

class AlgoritmoGeradorPasswordsAdapter1 {
    --
    +String geraPassword(String nome, Email email)
}

class AlgoritmoGeradorPasswordsAdapter2 {
    --
    +String geraPassword(String nome, Email email)
}

class AlgoritmoExterno1API {
    +String randomPassword()
    +String randomPassword(Integer minChars, Integer maxChars)
}

class AlgoritmoExterno2API {
    +Password generatePassword()
    +Password generatePassword(String feedChars)
    +Password generatePassword(Integer strength)
    +Password generatePassword(Integer strength, String feedChars)
}

AlgoritmoGeradorPasswords <|.. AlgoritmoGeradorPasswordsAdapter1
AlgoritmoGeradorPasswordsAdapter1 --> AlgoritmoExterno1API
AlgoritmoGeradorPasswords <|.. AlgoritmoGeradorPasswordsAdapter2
AlgoritmoGeradorPasswordsAdapter2 --> AlgoritmoExterno2API

@enduml